#line 2 "libmemcached/csl/scanner.cc"
#line 39 "libmemcached/csl/scanner.l"

#include <libmemcached/csl/common.h>
#include <libmemcached/csl/context.h>
#include <libmemcached/csl/parser.h>
#include <libmemcached/csl/symbol.h>

#ifndef __INTEL_COMPILER
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#endif

#define YY_NO_INPUT

#define YY_EXTRA_TYPE Context*




#line 24 "libmemcached/csl/scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE config_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via config_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void config_restart (FILE *input_file ,yyscan_t yyscanner );
void config__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE config__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void config__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void config_pop_buffer_state (yyscan_t yyscanner );

static void config_ensure_buffer_stack (yyscan_t yyscanner );
static void config__load_buffer_state (yyscan_t yyscanner );
static void config__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER config__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE config__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *config_alloc (yy_size_t ,yyscan_t yyscanner );
void *config_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void config_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer config__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define config_wrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 67
#define YY_END_OF_BUFFER 68
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[547] =
    {   0,
        0,    0,   68,   66,    5,    5,    1,   66,   66,   66,
        2,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,    0,   65,    0,   50,
        0,    0,    0,    2,    3,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    6,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,    4,
       64,   64,    2,    3,   64,   55,   64,   46,   64,   64,
       64,   64,   64,   64,   65,    0,   64,   54,   64,   64,
       64,   64,   64,   64,   50,   50,   50,   50,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,    4,    0,   64,    2,    3,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   48,   50,   50,   50,   50,   50,   50,
        0,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,    4,
       64,   64,    3,   64,   44,   47,   49,   64,    0,   60,
       64,   64,   64,   64,   64,   43,   64,   50,   50,   50,
       50,   50,   50,   50,    0,    0,    0,   50,   50,   50,
       50,   50,   50,    0,   50,   50,   50,    0,   50,   50,

       50,   50,    0,    0,   50,   50,    4,    0,   64,    3,
       64,    0,   64,   64,   64,   64,   52,   61,   53,   64,
       50,   50,   50,   50,   50,   50,    0,   15,    0,    0,
        0,   50,   50,   50,    0,    0,   50,    0,   50,   50,
       50,    0,   50,    0,   50,   50,    0,    0,    0,    0,
       50,    4,   63,   64,   64,   64,   64,   58,   56,   42,
       62,   45,   50,   50,   50,   50,   50,    0,    0,    0,
        0,    0,   50,   50,   50,    0,    0,   50,    0,   50,
        0,   50,    0,   50,    0,   50,   50,    0,    0,    0,
        0,   50,   63,   64,   59,   57,    0,    0,   50,   50,

       50,    0,    0,    0,    0,    0,   50,   19,    0,    0,
        0,    0,   50,    0,    0,    0,    7,    0,    0,    8,
        0,    0,   50,    0,    0,   34,    0,    0,   63,   64,
        0,    0,   50,    0,   50,    0,    0,    0,    0,    0,
       50,    0,    0,    0,    0,   50,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   51,
        0,    0,   50,    0,   50,    0,    0,    0,    0,    0,
       50,    0,    0,   38,   37,   50,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   35,    0,
        0,    0,    0,    0,   50,    0,    0,    0,    0,    0,

       39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       29,    0,    0,    0,    0,    0,   36,    0,    0,    0,
        0,   50,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   30,    0,    0,
       33,    0,    0,    0,    0,   50,    0,    0,    0,    0,
        0,    0,    0,    0,   23,    0,    0,   26,    0,    0,
        0,    0,   32,    0,    0,    0,    0,   13,   40,    0,
        0,    0,    0,    0,   21,    0,    0,    0,    0,    0,
        0,   31,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   25,    0,    0,    0,    9,   10,   11,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       41,   12,    0,    0,   17,    0,    0,    0,    0,    0,
        0,    0,    0,   18,    0,    0,    0,   27,   28,    0,
        0,    0,    0,    0,   14,   16,   20,    0,    0,    0,
        0,    0,    0,   22,   24,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   11,   11,   11,   18,    1,    1,
       19,    1,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,   47,    1,    1,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[552] =
    {   0,
        0,  633,  635, 1748, 1748, 1748, 1748,   70,  626,  608,
       67,   74,    0,   57,   52,   59,   73,   57,   64,   74,
      621,   77,   79,   77,   65,  622,  101, 1748,  614,  138,
      202,  215,  217,  230,  237,  250,  252,  259,  265,  277,
      282,  287,  297,  271,  315,  377,  323,  342,  350,  359,
      364,  396,  401,  612, 1748,  449,  242,   73,   80,   85,
       90,   78,  378,   79,  397,  398,   92,   77,   94,  441,
      328,  515,  528,  481,  499,  421,  541,  543,  548,  553,
      559,  565,  576,  590,  595,  649,    0,  597,  622,  614,
      624,  656,  632,  674,  123,  132,  235,  249,  253,  271,

      604,  285,  296,  328,  403,  340,  358,  375,  379,  413,
      654,  404,  438,  456,  444,  673,  702,  720,  740,  727,
      753,  758,  764,  766,  772,  781,  787,  795,  817,  831,
      833,  842,  849,  855,  463,  460,  753,  519,  537,  537,
      845,  544,  561,  594,  634,  641,  654,  601,  658,  660,
      728,  586,  752,  759,  767,  780,  572,  823,  788,  900,
      913,  861,  920,  933,  875,  935,  940,  942,  948,  950,
      955,  961,  966,  968,  977,  984, 1003,  780,  809,  830,
      846,  835,  863,  126,  847,  914,  913,  952,  958,  974,
      571,  570,  966,  962,  963,  972,  993,  980,  996,  569,

     1001,  991,  997,  994,  567, 1010, 1059, 1072, 1085, 1748,
     1098, 1100, 1034, 1107, 1116, 1122, 1127, 1134, 1142, 1144,
      992, 1002, 1023, 1044, 1062,  564, 1083, 1748, 1088, 1084,
     1107, 1101, 1108, 1106, 1105, 1125, 1126, 1131, 1138,  547,
     1129, 1142, 1134, 1148, 1152, 1140, 1154, 1145, 1157, 1160,
     1140, 1748, 1209, 1188, 1222, 1224, 1230, 1235, 1241, 1243,
     1250, 1255,  546,  527, 1159, 1194, 1219, 1211, 1225, 1231,
      526,  517, 1244, 1221,  514, 1238, 1247, 1242, 1240,  513,
     1234,  461, 1244,  258, 1244,  471, 1240, 1260, 1262, 1251,
     1267,  468, 1312, 1301, 1325, 1331, 1254, 1281, 1284,  456,

     1290, 1312, 1298, 1302, 1306, 1300, 1321,    0, 1311, 1315,
     1308, 1319, 1308, 1330, 1330, 1328, 1748, 1333, 1323, 1748,
     1325, 1346,  451, 1332, 1350, 1748, 1337, 1347, 1389, 1399,
     1349, 1363, 1366, 1353, 1359, 1362, 1373,  406, 1364, 1389,
     1387, 1387, 1389,  392,  373, 1392, 1383, 1399, 1389, 1388,
     1399, 1400, 1386, 1407, 1409, 1414, 1401, 1413, 1411, 1460,
     1409, 1412,  383, 1426, 1427, 1418,  367, 1415, 1441, 1430,
      351,  357, 1438, 1748, 1748,  352, 1433, 1446, 1451, 1437,
     1456, 1447, 1443, 1463, 1467, 1457, 1466, 1470, 1748, 1447,
     1453, 1454, 1470, 1464, 1464, 1471, 1471, 1490, 1486, 1488,

     1748, 1476, 1481, 1488, 1489, 1498, 1496, 1492, 1492, 1511,
     1748, 1498, 1498, 1509, 1511, 1499, 1748, 1510, 1521, 1518,
     1523, 1515, 1516, 1531, 1513, 1530, 1518, 1536, 1527, 1543,
      337, 1544, 1529,  334,  344,  340, 1553, 1748, 1540, 1560,
     1748, 1563, 1548, 1556, 1555,  325, 1557, 1559, 1568, 1554,
     1566, 1564,  322, 1565, 1748, 1578, 1563, 1748, 1565, 1566,
     1568, 1583, 1748, 1574, 1571, 1587, 1576, 1748, 1748, 1598,
     1586, 1602, 1605, 1602, 1748, 1606,  332,  308, 1612, 1613,
     1604, 1748, 1612, 1607,  289, 1607, 1609, 1616, 1622, 1617,
     1627, 1628, 1619, 1748, 1613, 1614,  285, 1748, 1748, 1748,

      282, 1625, 1642,  253, 1633, 1642, 1644, 1643, 1648, 1654,
     1748, 1748, 1659, 1643, 1748,  243, 1661, 1669, 1656,  237,
      221, 1674, 1667, 1748, 1660,  229, 1658, 1748, 1748, 1677,
      217,  208, 1665, 1679, 1748, 1748, 1748, 1680, 1668, 1690,
     1673, 1689,  202, 1748, 1748, 1748, 1741,  154, 1743,  131,
     1745
    } ;

static yyconst flex_int16_t yy_def[552] =
    {   0,
      546,    1,  546,  546,  546,  546,  546,  547,  546,  546,
      548,  546,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  549,  547,  546,  547,  546,
      546,  550,  550,  550,  546,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  551,  550,  550,  550,  550,
      550,  550,  550,  549,  546,   30,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  546,
      550,  550,  550,  546,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  551,   86,  550,  550,  550,
      550,  550,  550,  550,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,  546,  550,  550,  550,  546,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,   56,   56,   56,   56,   56,   56,
      546,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  546,
      550,  550,  546,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,   56,   56,   56,
       56,   56,   56,   56,  546,  546,  546,   56,   56,   56,
       56,   56,   56,  546,   56,   56,   56,  546,   56,   56,

       56,   56,  546,  546,   56,   56,  546,  550,  550,  546,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
       56,   56,   56,   56,   56,   56,  546,  546,  546,  546,
      546,   56,   56,   56,  546,  546,   56,  546,   56,   56,
       56,  546,   56,  546,   56,   56,  546,  546,  546,  546,
       56,  546,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,   56,   56,   56,   56,   56,  546,  546,  546,
      546,  546,   56,   56,   56,  546,  546,   56,  546,   56,
      546,   56,  546,   56,  546,   56,   56,  546,  546,  546,
      546,   56,  550,  550,  550,  550,  546,  546,   56,   56,

       56,  546,  546,  546,  546,  546,   56,   56,  546,  546,
      546,  546,   56,  546,  546,  546,  546,  546,  546,  546,
      546,  546,   56,  546,  546,  546,  546,  546,  550,  550,
      546,  546,   56,  546,   56,  546,  546,  546,  546,  546,
       56,  546,  546,  546,  546,   56,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  550,
      546,  546,   56,  546,   56,  546,  546,  546,  546,  546,
       56,  546,  546,  546,  546,   56,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,   56,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,   56,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,   56,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,    0,  546,  546,  546,  546,
      546
    } ;

static yyconst flex_int16_t yy_nxt[1823] =
    {   0,
        4,    5,    6,    7,    8,    4,    7,    9,    4,   10,
       11,   11,   11,   11,   11,   11,   11,   12,    7,    4,
       13,   13,   14,   15,   16,   17,   13,   18,   19,   20,
       13,   21,   22,   13,   13,   13,   13,   23,   24,   25,
       13,   13,   13,   13,   13,   13,    4,    4,   13,   13,
       14,   15,   16,   17,   13,   18,   19,   20,   13,   21,
       22,   13,   13,   13,   13,   23,   24,   25,   13,   13,
       13,   13,   13,   13,   28,   33,   38,   34,   34,   34,
       34,   34,   34,   34,   35,   35,   35,   35,   35,   35,
       35,   36,   39,   41,   37,   43,   40,   44,   45,   50,

       47,   52,   53,   51,   38,   28,   42,   97,   98,   99,
      100,   48,  101,  105,  113,  114,   29,   49,  115,   36,
       39,   41,   37,   43,   40,   44,   45,   50,   47,   52,
       53,   51,   71,  227,   42,   97,   98,   99,  100,   48,
      101,  105,  113,  114,  228,   49,  115,   29,   56,   56,
       56,   56,   56,   56,   56,   32,  135,  136,   56,   57,
       58,   59,   56,   60,   56,   61,   62,   56,   56,   56,
       56,   63,   56,   64,   56,   65,   66,   67,   68,   69,
       56,   56,   56,   56,  135,  136,   56,   57,   58,   59,
       56,   60,   56,   61,   62,   56,   56,   56,   56,   63,

       56,   64,   56,   65,   66,   67,   68,   69,   56,   56,
       56,   56,   70,   70,   70,   70,   70,   70,   70,   32,
      545,   32,   32,   32,   32,   32,  537,   72,   72,   72,
       72,   72,   72,   72,   32,  536,  533,   32,   33,  529,
       73,   73,   73,   73,   73,   73,   73,   74,   74,   74,
       74,   74,   74,   74,   32,  528,   32,   32,   32,   32,
       32,  524,   32,   32,   32,  319,   32,   32,  137,   32,
       95,  515,   32,   32,   76,   32,  320,   32,   32,   32,
       77,   32,   96,   75,   32,   32,   32,  138,   78,   32,
       32,   32,  139,   83,   32,   32,  137,   32,   95,   32,

      512,   32,   76,  511,   32,   32,   32,  500,   77,  140,
       96,   75,   32,   80,   79,  138,   78,  142,   32,   32,
      139,   83,   32,   32,   32,   82,  494,   32,   81,   32,
       32,   32,   32,  143,   32,   32,   32,  140,   88,  493,
      475,   80,   79,  468,   32,  142,   32,  460,   84,   32,
       32,  459,  458,   82,   32,  455,   81,   32,   32,  404,
      144,  143,   32,   32,  402,   89,   32,   32,   32,  401,
       32,   32,   32,  147,  397,   32,   84,   27,   27,   27,
       27,   85,   27,   27,   86,   86,   27,   90,  144,   32,
      393,  375,   91,   89,   27,   27,   27,   32,  102,  148,

       32,  147,   92,   32,   32,   32,   32,  149,   32,   32,
      374,   32,  103,  368,  150,   90,  151,  106,  104,  107,
       91,  108,  109,   29,   86,   32,  102,  148,   32,   32,
       92,  110,  111,   93,  145,  149,  152,  146,  112,  156,
      103,   94,  150,   32,  151,  106,  104,  107,   32,  108,
      109,  116,  116,  116,  116,  116,  116,  116,  355,  110,
      111,   93,  145,  334,  152,  146,  112,  156,   32,   94,
       56,   56,   56,  157,   56,  328,   56,   56,  322,  317,
      158,  159,   56,  178,   56,  179,   56,   56,   56,   56,
       56,  120,  120,  120,  120,  120,  120,  120,   56,   56,

       56,  157,   56,   32,   56,   56,   32,   32,  158,  159,
       56,  178,   56,  179,   56,   56,   56,   56,   56,   32,
      315,  309,   32,  117,  306,  118,  118,  118,  118,  118,
      118,  118,   32,  305,  298,   32,   33,  121,  119,  119,
      119,  119,  119,  119,  119,   32,   32,   32,   32,   32,
       32,   32,   32,  297,  281,   32,   32,   32,  182,  183,
       32,   32,   32,   32,  184,  121,   32,   32,  188,   32,
      125,  268,   32,   32,  250,   32,  244,  236,  235,  203,
       32,  122,  123,   32,   32,  189,  182,  183,   32,  126,
       32,  124,  184,  198,   32,   32,  188,   32,   32,   32,

       32,   32,   32,   32,   32,   32,   32,  127,  194,  122,
      123,  141,   32,  189,   55,  190,  546,  126,   32,  124,
      128,   32,   32,   32,   55,   46,   32,   31,   32,   32,
       32,   32,   32,   30,  546,  127,   32,   32,   26,   32,
       32,  546,   32,  190,   32,  546,  130,  131,  128,   27,
       27,   27,   27,   85,   27,   27,   86,   86,   27,  546,
       32,   32,  129,   32,   32,  191,   27,   27,   27,   32,
      546,   32,  192,  133,  130,  131,  153,  193,   32,   32,
      132,   32,   32,  160,  160,  160,  160,  160,  160,  160,
      129,  154,  195,  191,  155,   29,   86,  196,  134,  546,

      192,  133,  546,   32,  153,  193,   32,  546,  132,   32,
       32,  546,  161,  161,  161,  161,  161,  161,  161,  154,
      195,   32,  155,  546,   32,  196,  134,   32,  117,  546,
      162,  162,  162,  162,  162,  162,  162,  163,  163,  163,
      163,  163,  163,  163,   32,  546,  546,   32,   32,   32,
      119,  119,  119,  119,  119,  119,  119,   32,  546,  546,
       32,   32,   32,  546,  546,   32,   32,   32,   32,  197,
       32,   32,   32,   32,   32,  546,   32,  546,  180,   32,
       32,  164,  199,  546,  165,   32,  181,   32,   32,   32,
      167,   32,  168,  546,   32,   32,  546,  197,  200,   32,

       32,  166,   32,   32,  201,   32,  180,  546,  170,  164,
      199,   32,  165,   32,  181,  202,  206,  221,  167,  169,
      168,   32,  546,  172,   32,   32,  200,  171,   32,  166,
      204,  546,  201,  222,   32,   32,  170,   32,   32,   32,
       32,   32,   32,  202,  206,  221,   32,  546,  173,   32,
       32,  172,  546,   32,  546,  171,   32,   32,  223,   32,
      205,  222,   32,   32,   32,   32,  185,  175,   32,  117,
      224,  174,  225,  177,  546,  186,  173,  187,   32,   32,
       32,  176,   32,   32,  546,  546,  223,  546,  205,   32,
      226,  229,  546,  546,  185,  175,   32,  546,  224,  174,

      225,  177,   32,  186,  546,  187,  546,  546,   32,  176,
      207,  207,  207,  207,  207,  207,  207,   32,  226,  229,
       32,  208,   32,  209,  209,  209,  209,  209,  209,  209,
      210,  210,  210,  210,  210,  210,  210,   32,  230,   32,
       32,   32,   32,   32,   32,  546,   32,   32,   32,   32,
       32,  231,   32,  546,   32,   32,   32,   32,   32,   32,
       32,  213,   32,   32,  214,   32,  230,  546,   32,   32,
       32,  211,   32,   32,   32,   32,   32,  546,  215,  231,
       32,   32,   32,  546,   32,   32,  217,   32,   32,  212,
      232,   32,   32,  233,  216,   32,  546,   32,  234,  211,

      237,  238,   32,  546,  239,  218,  215,   32,   32,  219,
       32,   32,  546,   32,  217,   32,  240,  241,  232,  242,
      243,  233,  216,  245,   32,  246,  234,  247,  237,  238,
      248,   32,  239,  218,  249,  251,  263,  219,   32,  264,
      220,   32,   32,  546,  240,  241,  258,  242,  243,  265,
       32,  245,  546,  246,  546,  247,  546,  546,  248,  546,
      546,  546,  249,  251,  263,  546,  266,  264,  220,  252,
      252,  252,  252,  252,  252,  252,   32,  265,  546,   32,
       32,   32,  253,  253,  253,  253,  253,  253,  253,   32,
      267,  546,   32,  208,  266,  254,  254,  254,  254,  254,

      254,  254,   32,  546,   32,   32,   32,   32,   32,  546,
      546,   32,  546,  256,   32,   32,  257,  546,  267,   32,
       32,  259,  546,   32,   32,  269,   32,  270,  271,   32,
       32,   32,   32,  272,   32,   32,  273,  255,   32,  274,
      260,   32,   32,  275,  276,   32,   32,   32,   32,   32,
       32,   32,   32,  269,   32,  270,  271,  277,  278,  279,
      261,  272,  280,   32,  273,  255,  282,  274,  260,   32,
      283,  275,  276,  284,   32,  285,  286,  287,  288,  289,
      290,   32,  262,  291,  292,  277,  278,  279,  261,   32,
      280,   32,   32,  546,  282,   32,  208,  546,  283,  299,

      546,  284,  546,  285,  286,  287,  288,  289,  290,  546,
      262,  291,  292,   32,  546,  546,   32,   32,  546,  293,
      293,  293,  293,  293,  293,  293,   32,  299,   32,   32,
       32,   32,   32,  300,   32,   32,  295,   32,   32,   32,
      301,  546,   32,   32,  296,   32,  294,   32,   32,   32,
       32,   32,  302,  303,   32,  304,   32,   32,   32,   32,
      546,  300,   32,   32,  307,  308,  310,  311,  301,   32,
      313,   32,  314,  316,  294,  312,  318,   32,  321,  323,
      302,  303,   32,  304,  324,  325,  326,  327,   32,  331,
       32,  546,  307,  308,  310,  311,  546,   32,  313,  546,

      314,  316,   32,  312,  318,   32,  321,  323,   32,   32,
      546,  546,  324,  325,  326,  327,   32,  331,  332,   32,
       32,  333,  329,  329,  329,  329,  329,  329,  329,   32,
      335,  546,   32,   32,  330,   32,  336,  337,   32,   32,
      338,  339,  340,  341,  546,  342,  332,  343,   32,  333,
      546,  344,  345,  346,  347,  348,  349,  350,  335,   32,
      351,  352,  330,  353,  336,  337,  354,  356,  338,  339,
      340,  341,   32,  342,  357,  343,  358,  359,   32,  344,
      345,  346,  347,  348,  349,  350,  361,  362,  351,  352,
      363,  353,  364,   32,  354,  356,   32,   32,  365,  366,

      367,  369,  357,   32,  358,  359,   32,   32,  546,  370,
      546,  371,  372,  373,  361,  362,  376,  377,  363,  378,
      364,  379,  380,  381,  382,  383,  365,  366,  367,  369,
      384,  385,  388,  389,  386,  390,   32,  370,  360,  371,
      372,  373,  387,  391,  376,  377,   32,  378,  392,  379,
      380,  381,  382,  383,  394,  395,  396,  398,  384,  385,
      388,  389,  386,  390,   32,  399,  360,   32,   32,  400,
      387,  391,  403,  405,  406,  407,  392,  408,  409,  546,
      410,  411,  394,  395,  396,  398,  412,  413,  414,  415,
      416,  417,  418,  399,  419,  420,  421,  400,  422,  423,

      403,  405,  406,  407,  424,  408,  409,   32,  410,  411,
      425,  426,  427,  428,  412,  413,  414,  415,  416,  417,
      418,  429,  419,  420,  421,  430,  422,  423,  431,  432,
      433,  434,  424,  435,  436,  437,  438,  439,  425,  426,
      427,  428,  440,  441,  442,  443,  444,  445,  446,  429,
      447,  448,  449,  430,  450,  451,  431,  432,  433,  434,
      452,  435,  436,  437,  438,  439,  453,  454,  456,  457,
      440,  441,  442,  443,  444,  445,  446,  461,  447,  448,
      449,  462,  450,  451,  463,  464,  465,  466,  452,  467,
      469,  470,  471,  472,  453,  454,  456,  457,  473,  474,

      476,  477,  478,  479,  480,  461,  481,  482,  483,  462,
      484,  485,  463,  464,  465,  466,  486,  467,  469,  470,
      471,  472,  487,  488,  489,  490,  473,  474,  476,  477,
      478,  479,  480,  491,  481,  482,  483,  492,  484,  485,
      495,  496,  497,  498,  486,  499,  501,  502,  503,  504,
      487,  488,  489,  490,  505,  506,  507,  508,  509,  510,
      513,  491,  514,  516,  517,  492,  518,  519,  495,  496,
      497,  498,  520,  499,  501,  502,  503,  504,  521,  522,
      523,  525,  505,  506,  507,  508,  509,  510,  513,  526,
      514,  516,  517,  527,  518,  519,  530,  531,  532,  534,

      520,  535,  538,  539,  540,  541,  521,  522,  523,  525,
      542,  543,  544,  546,  546,  546,  546,  526,  546,  546,
      546,  527,  546,  546,  530,  531,  532,  534,  546,  535,
      538,  539,  540,  541,  546,  546,  546,  546,  542,  543,
      544,   27,   27,   54,   54,   87,   87,    3,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546
    } ;

static yyconst flex_int16_t yy_chk[1823] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    8,   11,   15,   11,   11,   11,
       11,   11,   11,   11,   12,   12,   12,   12,   12,   12,
       12,   14,   16,   17,   14,   18,   16,   19,   20,   23,

       22,   24,   25,   23,   15,   27,   17,   58,   59,   60,
       61,   22,   62,   64,   67,   68,    8,   22,   69,   14,
       16,   17,   14,   18,   16,   19,   20,   23,   22,   24,
       25,   23,  550,  184,   17,   58,   59,   60,   61,   22,
       62,   64,   67,   68,  184,   22,   69,   27,   30,   30,
       30,   30,   30,   30,   30,  548,   95,   96,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   95,   96,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   31,   31,   31,   31,   31,   31,   31,   32,
      543,   33,   32,   32,   33,   33,  532,   33,   33,   33,
       33,   33,   33,   33,   34,  531,  526,   34,   34,  521,
       34,   34,   34,   34,   34,   34,   34,   35,   35,   35,
       35,   35,   35,   35,   36,  520,   37,   36,   36,   37,
       37,  516,   32,   38,   33,  284,   38,   38,   97,   39,
       57,  504,   39,   39,   37,   44,  284,   34,   44,   44,
       38,   40,   57,   36,   40,   40,   41,   98,   39,   41,
       41,   42,   99,   44,   42,   42,   97,   36,   57,   37,

      501,   43,   37,  497,   43,   43,   38,  485,   38,  100,
       57,   36,   39,   41,   40,   98,   39,  102,   44,   45,
       99,   44,   45,   45,   40,   43,  478,   47,   42,   41,
       47,   47,   71,  103,   42,   71,   71,  100,   47,  477,
      453,   41,   40,  446,   43,  102,   48,  436,   45,   48,
       48,  435,  434,   43,   49,  431,   42,   49,   49,  376,
      104,  103,   45,   50,  372,   48,   50,   50,   51,  371,
       47,   51,   51,  106,  367,   71,   45,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   49,  104,   48,
      363,  345,   50,   48,   46,   46,   46,   49,   63,  107,

       52,  106,   51,   52,   52,   53,   50,  108,   53,   53,
      344,   51,   63,  338,  108,   49,  109,   65,   63,   65,
       50,   65,   66,   46,   46,   76,   63,  107,   76,   76,
       51,   66,   66,   52,  105,  108,  110,  105,   66,  112,
       63,   53,  108,   52,  109,   65,   63,   65,   53,   65,
       66,   70,   70,   70,   70,   70,   70,   70,  323,   66,
       66,   52,  105,  300,  110,  105,   66,  112,   76,   53,
       56,   56,   56,  113,   56,  292,   56,   56,  286,  282,
      114,  115,   56,  135,   56,  136,   56,   56,   56,   56,
       56,   74,   74,   74,   74,   74,   74,   74,   56,   56,

       56,  113,   56,   75,   56,   56,   75,   75,  114,  115,
       56,  135,   56,  136,   56,   56,   56,   56,   56,   72,
      280,  275,   72,   72,  272,   72,   72,   72,   72,   72,
       72,   72,   73,  271,  264,   73,   73,   75,   73,   73,
       73,   73,   73,   73,   73,   77,   75,   78,   77,   77,
       78,   78,   79,  263,  240,   79,   79,   80,  138,  139,
       80,   80,   72,   81,  140,   75,   81,   81,  142,   82,
       81,  226,   82,   82,  205,   73,  200,  192,  191,  157,
       83,   77,   79,   83,   83,  143,  138,  139,   77,   82,
       78,   80,  140,  152,   84,   79,  142,   84,   84,   85,

       80,   88,   85,   85,   88,   88,   81,   83,  148,   77,
       79,  101,   82,  143,   54,  144,   29,   82,   90,   80,
       84,   90,   90,   83,   26,   21,   89,   10,   91,   89,
       89,   91,   91,    9,    3,   83,   93,   84,    2,   93,
       93,    0,   85,  144,   88,    0,   90,   91,   84,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,    0,
       92,   90,   89,   92,   92,  145,   86,   86,   86,   89,
        0,   91,  146,   93,   90,   91,  111,  147,   94,   93,
       92,   94,   94,  116,  116,  116,  116,  116,  116,  116,
       89,  111,  149,  145,  111,   86,   86,  150,   94,    0,

      146,   93,    0,   92,  111,  147,  117,    0,   92,  117,
      117,    0,  117,  117,  117,  117,  117,  117,  117,  111,
      149,   94,  111,    0,  118,  150,   94,  118,  118,    0,
      118,  118,  118,  118,  118,  118,  118,  120,  120,  120,
      120,  120,  120,  120,  119,    0,    0,  119,  119,  117,
      119,  119,  119,  119,  119,  119,  119,  121,    0,    0,
      121,  121,  122,    0,    0,  122,  122,  118,  123,  151,
      124,  123,  123,  124,  124,    0,  125,    0,  137,  125,
      125,  121,  153,    0,  122,  126,  137,  119,  126,  126,
      124,  127,  125,    0,  127,  127,    0,  151,  154,  128,

      121,  123,  128,  128,  155,  122,  137,    0,  126,  121,
      153,  123,  122,  124,  137,  156,  159,  178,  124,  125,
      125,  129,    0,  128,  129,  129,  154,  127,  126,  123,
      158,    0,  155,  179,  127,  130,  126,  131,  130,  130,
      131,  131,  128,  156,  159,  178,  132,    0,  129,  132,
      132,  128,    0,  133,    0,  127,  133,  133,  180,  134,
      158,  179,  134,  134,  129,  162,  141,  131,  162,  162,
      181,  130,  182,  133,    0,  141,  129,  141,  130,  165,
      131,  132,  165,  165,    0,    0,  180,    0,  158,  132,
      183,  185,    0,    0,  141,  131,  133,    0,  181,  130,

      182,  133,  134,  141,    0,  141,    0,    0,  162,  132,
      160,  160,  160,  160,  160,  160,  160,  161,  183,  185,
      161,  161,  165,  161,  161,  161,  161,  161,  161,  161,
      163,  163,  163,  163,  163,  163,  163,  164,  186,  166,
      164,  164,  166,  166,  167,    0,  168,  167,  167,  168,
      168,  187,  169,    0,  170,  169,  169,  170,  170,  171,
      161,  169,  171,  171,  169,  172,  186,    0,  172,  172,
      173,  164,  174,  173,  173,  174,  174,    0,  171,  187,
      164,  175,  166,    0,  175,  175,  173,  167,  176,  168,
      188,  176,  176,  189,  172,  169,    0,  170,  190,  164,

      193,  194,  171,    0,  195,  174,  171,  177,  172,  175,
      177,  177,    0,  173,  173,  174,  196,  197,  188,  198,
      199,  189,  172,  201,  175,  202,  190,  203,  193,  194,
      203,  176,  195,  174,  204,  206,  221,  175,  213,  222,
      177,  213,  213,    0,  196,  197,  213,  198,  199,  223,
      177,  201,    0,  202,    0,  203,    0,    0,  203,    0,
        0,    0,  204,  206,  221,    0,  224,  222,  177,  207,
      207,  207,  207,  207,  207,  207,  208,  223,    0,  208,
      208,  213,  208,  208,  208,  208,  208,  208,  208,  209,
      225,    0,  209,  209,  224,  209,  209,  209,  209,  209,

      209,  209,  211,    0,  212,  211,  211,  212,  212,    0,
        0,  214,    0,  212,  214,  214,  212,    0,  225,  208,
      215,  214,    0,  215,  215,  227,  216,  229,  230,  216,
      216,  217,  209,  231,  217,  217,  232,  211,  218,  233,
      215,  218,  218,  234,  235,  211,  219,  212,  220,  219,
      219,  220,  220,  227,  214,  229,  230,  236,  237,  238,
      216,  231,  239,  215,  232,  211,  241,  233,  215,  216,
      242,  234,  235,  243,  217,  244,  245,  246,  247,  248,
      249,  218,  220,  250,  251,  236,  237,  238,  216,  219,
      239,  220,  254,    0,  241,  254,  254,    0,  242,  265,

        0,  243,    0,  244,  245,  246,  247,  248,  249,    0,
      220,  250,  251,  253,    0,    0,  253,  253,    0,  253,
      253,  253,  253,  253,  253,  253,  255,  265,  256,  255,
      255,  256,  256,  266,  257,  254,  256,  257,  257,  258,
      267,    0,  258,  258,  257,  259,  255,  260,  259,  259,
      260,  260,  268,  269,  261,  270,  253,  261,  261,  262,
        0,  266,  262,  262,  273,  274,  276,  277,  267,  255,
      278,  256,  279,  281,  255,  277,  283,  257,  285,  287,
      268,  269,  258,  270,  288,  289,  290,  291,  259,  297,
      260,    0,  273,  274,  276,  277,    0,  261,  278,    0,

      279,  281,  262,  277,  283,  294,  285,  287,  294,  294,
        0,    0,  288,  289,  290,  291,  293,  297,  298,  293,
      293,  299,  293,  293,  293,  293,  293,  293,  293,  295,
      301,    0,  295,  295,  294,  296,  302,  303,  296,  296,
      304,  305,  306,  307,    0,  309,  298,  310,  294,  299,
        0,  311,  312,  313,  314,  315,  316,  318,  301,  293,
      319,  319,  294,  321,  302,  303,  322,  324,  304,  305,
      306,  307,  295,  309,  325,  310,  327,  328,  296,  311,
      312,  313,  314,  315,  316,  318,  331,  332,  319,  319,
      333,  321,  334,  329,  322,  324,  329,  329,  335,  336,

      337,  339,  325,  330,  327,  328,  330,  330,    0,  340,
        0,  341,  342,  343,  331,  332,  346,  347,  333,  348,
      334,  349,  350,  351,  352,  353,  335,  336,  337,  339,
      354,  355,  357,  358,  356,  359,  329,  340,  330,  341,
      342,  343,  356,  361,  346,  347,  330,  348,  362,  349,
      350,  351,  352,  353,  364,  365,  366,  368,  354,  355,
      357,  358,  356,  359,  360,  369,  330,  360,  360,  370,
      356,  361,  373,  377,  378,  379,  362,  380,  381,    0,
      382,  383,  364,  365,  366,  368,  384,  385,  386,  387,
      388,  390,  391,  369,  392,  393,  394,  370,  395,  396,

      373,  377,  378,  379,  397,  380,  381,  360,  382,  383,
      398,  399,  400,  402,  384,  385,  386,  387,  388,  390,
      391,  403,  392,  393,  394,  404,  395,  396,  405,  406,
      407,  408,  397,  409,  410,  412,  413,  414,  398,  399,
      400,  402,  415,  416,  418,  419,  420,  421,  422,  403,
      423,  424,  425,  404,  426,  427,  405,  406,  407,  408,
      428,  409,  410,  412,  413,  414,  429,  430,  432,  433,
      415,  416,  418,  419,  420,  421,  422,  437,  423,  424,
      425,  439,  426,  427,  440,  442,  443,  444,  428,  445,
      447,  448,  449,  450,  429,  430,  432,  433,  451,  452,

      454,  456,  457,  459,  460,  437,  461,  462,  464,  439,
      465,  466,  440,  442,  443,  444,  467,  445,  447,  448,
      449,  450,  470,  471,  472,  473,  451,  452,  454,  456,
      457,  459,  460,  474,  461,  462,  464,  476,  465,  466,
      479,  480,  481,  483,  467,  484,  486,  487,  488,  489,
      470,  471,  472,  473,  490,  491,  492,  493,  495,  496,
      502,  474,  503,  505,  506,  476,  507,  508,  479,  480,
      481,  483,  509,  484,  486,  487,  488,  489,  510,  513,
      514,  517,  490,  491,  492,  493,  495,  496,  502,  518,
      503,  505,  506,  519,  507,  508,  522,  523,  525,  527,

      509,  530,  533,  534,  538,  539,  510,  513,  514,  517,
      540,  541,  542,    0,    0,    0,    0,  518,    0,    0,
        0,  519,    0,    0,  522,  523,  525,  527,    0,  530,
      533,  534,  538,  539,    0,    0,    0,    0,  540,  541,
      542,  547,  547,  549,  549,  551,  551,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546
    } ;

static yyconst flex_int16_t yy_rule_linenum[67] =
    {   0,
       99,  101,  103,  105,  107,  110,  114,  116,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  145,  147,  148,  150,  152,
      153,  155,  156,  157,  158,  159,  160,  162,  163,  166,
      171,  172,  173,  175,  176,  177,  178,  179,  180,  181,
      182,  183,  185,  194,  212,  219
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "libmemcached/csl/scanner.l"
/*  vim:expandtab:shiftwidth=2:tabstop=2:smarttab:
 *
 *  Libmemcached library
 *
 *  Copyright (C) 2012 Data Differential, http://datadifferential.com/
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *
 *      * Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *
 *      * Redistributions in binary form must reproduce the above
 *  copyright notice, this list of conditions and the following disclaimer
 *  in the documentation and/or other materials provided with the
 *  distribution.
 *
 *      * The names of its contributors may not be used to endorse or
 *  promote products derived from this software without specific prior
 *  written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#line 60 "libmemcached/csl/scanner.l"
#include <cstdlib>
#include <cstring>

#define PARAM config_get_extra(yyscanner)

#define get_lex_chars(buffer, result, max_size, context) \
{ \
  if (context->pos >= context->length) \
  { \
    result= YY_NULL; \
  } \
  else \
  { \
    result= (int)(context->length - context->pos); \
    (size_t)result > (size_t)max_size ? result= max_size : 0; \
    memcpy(buffer, context->buf + context->pos, result); \
    context->pos += result; \
  } \
}


#define YY_INPUT(buffer, result, max_size) get_lex_chars(buffer, result, max_size, PARAM)

#line 1203 "libmemcached/csl/scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int config_lex_init (yyscan_t* scanner);

int config_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int config_lex_destroy (yyscan_t yyscanner );

int config_get_debug (yyscan_t yyscanner );

void config_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE config_get_extra (yyscan_t yyscanner );

void config_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *config_get_in (yyscan_t yyscanner );

void config_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *config_get_out (yyscan_t yyscanner );

void config_set_out  (FILE * out_str ,yyscan_t yyscanner );

int config_get_leng (yyscan_t yyscanner );

char *config_get_text (yyscan_t yyscanner );

int config_get_lineno (yyscan_t yyscanner );

void config_set_lineno (int line_number ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * config_get_lval (yyscan_t yyscanner );

void config_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int config_wrap (yyscan_t yyscanner );
#else
extern int config_wrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int config_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int config_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 96 "libmemcached/csl/scanner.l"



#line 1511 "libmemcached/csl/scanner.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			config_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		config__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 547 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1748 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 67 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 67 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 68 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 99 "libmemcached/csl/scanner.l"
{ return yytext[0];}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 101 "libmemcached/csl/scanner.l"
{ yylval->number= atoi(yytext); return (NUMBER); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 103 "libmemcached/csl/scanner.l"
{ yylval->number= atoi(yytext +1); return PORT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 105 "libmemcached/csl/scanner.l"
{ yylval->number= atoi(yytext +2); return WEIGHT_START; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 107 "libmemcached/csl/scanner.l"
; /* skip whitespace */
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 110 "libmemcached/csl/scanner.l"
{
      return COMMENT;
    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 114 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; yyextra->set_server(); return yyextra->previous_token= SERVER; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 116 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SOCKET; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 118 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= BINARY_PROTOCOL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 119 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= BUFFER_REQUESTS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 120 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= CONFIGURE_FILE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 121 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= CONNECT_TIMEOUT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= DISTRIBUTION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 123 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= HASH_WITH_NAMESPACE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 124 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= HASH; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 125 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= IO_BYTES_WATERMARK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 126 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= IO_KEY_PREFETCH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 127 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= IO_MSG_WATERMARK; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 128 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NOREPLY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NUMBER_OF_REPLICAS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= POLL_TIMEOUT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 132 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RCV_TIMEOUT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= REMOVE_FAILED_SERVERS; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RETRY_TIMEOUT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 135 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SND_TIMEOUT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 136 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SOCKET_RECV_SIZE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 137 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SOCKET_SEND_SIZE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 138 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SORT_HOSTS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 139 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SUPPORT_CAS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 140 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= _TCP_KEEPALIVE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 141 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= _TCP_KEEPIDLE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 142 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= _TCP_NODELAY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 143 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= USE_UDP; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 144 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= USER_DATA; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 145 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= VERIFY_KEY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 147 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= POOL_MIN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 148 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= POOL_MAX; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 150 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NAMESPACE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 152 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= FETCH_VERSION; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 153 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SOURCE_ADDRESS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 155 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= INCLUDE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 156 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RESET; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 157 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= PARSER_DEBUG; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 158 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SERVERS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 159 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= END; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 160 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= ERROR; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 162 "libmemcached/csl/scanner.l"
{ return yyextra->previous_token= TRUE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 163 "libmemcached/csl/scanner.l"
{ return yyextra->previous_token= FALSE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 166 "libmemcached/csl/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN_OPTION;
    }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 171 "libmemcached/csl/scanner.l"
{ return CONSISTENT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 172 "libmemcached/csl/scanner.l"
{ return MODULA; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 173 "libmemcached/csl/scanner.l"
{ return RANDOM; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 175 "libmemcached/csl/scanner.l"
{ return MD5; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 176 "libmemcached/csl/scanner.l"
{ return CRC; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 177 "libmemcached/csl/scanner.l"
{ return FNV1_64; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 178 "libmemcached/csl/scanner.l"
{ return FNV1A_64; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 179 "libmemcached/csl/scanner.l"
{ return FNV1_32; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 180 "libmemcached/csl/scanner.l"
{ return FNV1A_32; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 181 "libmemcached/csl/scanner.l"
{ return HSIEH; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 182 "libmemcached/csl/scanner.l"
{ return MURMUR; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 183 "libmemcached/csl/scanner.l"
{ return JENKINS; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 185 "libmemcached/csl/scanner.l"
{
      yylval->server.port= MEMCACHED_DEFAULT_PORT;
      yylval->server.weight= 1;
      yylval->server.c_str= yyextra->set_hostname(yytext, yyleng);
      if (yylval->server.c_str)
        yylval->server.size= yyleng;
      return IPADDRESS;
    }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 194 "libmemcached/csl/scanner.l"
{
      if (yyextra->is_server())
      {
        yylval->server.port= MEMCACHED_DEFAULT_PORT;
        yylval->server.weight= 1;
        yylval->server.c_str= yyextra->set_hostname(yytext, yyleng);
        if (yylval->server.c_str)
          yylval->server.size= yyleng;

        return HOSTNAME;
      }

      yylval->string.c_str = yytext;
      yylval->string.size = yyleng;

      return STRING;
    }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 212 "libmemcached/csl/scanner.l"
{
      config_get_text(yyscanner)[yyleng -1]= 0;
      yylval->string.c_str= yytext +1;
      yylval->string.size= yyleng -2;
      return QUOTED_STRING;
    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 219 "libmemcached/csl/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN;
    }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 224 "libmemcached/csl/scanner.l"
ECHO;
	YY_BREAK
#line 2004 "libmemcached/csl/scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * config_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( config_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of config_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					config_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			config_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) config_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 547 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 547 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 546);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					config_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( config_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void config_restart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        config_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	config__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	config__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		config_pop_buffer_state();
	 *		config_push_buffer_state(new_buffer);
     */
	config_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	config__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (config_wrap()) processing, but the only time this flag
	 * is looked at is after config_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void config__load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE config__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) config_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_is_our_buffer = 1;

	config__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with config__create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		config_free((void *) b->yy_ch_buf ,yyscanner );

	config_free((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a config_restart() or at EOF.
 */
/* %if-c-only */
    static void config__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	config__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then config__init_buffer was _probably_
     * called from config_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		config__load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	config_ensure_buffer_stack(yyscanner);

	/* This block is copied from config__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from config__switch_to_buffer. */
	config__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_pop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		config__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void config_ensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE config__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	config__switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to config_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       config__scan_bytes() instead.
 */
YY_BUFFER_STATE config__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return config__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to config_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE config__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) config_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = config__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in config__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE config_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int config_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int config_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int config_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *config_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void config_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see config__switch_to_buffer
 */
void config_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void config_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int config_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void config_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * config_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void config_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* %endif */

/* User-visible API */

/* config_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int config_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* config_lex_init_extra has the same functionality as config_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to config_alloc in
 * the yyextra field.
 */

int config_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    config_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    config_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from config_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * config_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* config_lex_destroy is for both reentrant and non-reentrant scanners. */
int config_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		config_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	config_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        config_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * config_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    config_free ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *config_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *config_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void config_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see config_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 224 "libmemcached/csl/scanner.l"



void Context::init_scanner()
{
  config_lex_init(&scanner);
  config_set_extra(this,scanner);
}

void Context::destroy_scanner()
{
  config_lex_destroy(scanner);
}


